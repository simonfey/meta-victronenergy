From 139c3c619789b26685c78375ee245b4c7cc0e4a3 Mon Sep 17 00:00:00 2001
From: Mans Rullgard <mans@mansr.com>
Date: Thu, 12 Aug 2021 14:47:11 +0100
Subject: [PATCH 7/9] backlight: victron-gxdisp: use regulator from devicetree

---
 drivers/video/backlight/victron-gxdisp-bl.c | 40 +++++++++++++++++----
 1 file changed, 33 insertions(+), 7 deletions(-)

diff --git a/drivers/video/backlight/victron-gxdisp-bl.c b/drivers/video/backlight/victron-gxdisp-bl.c
index f59a3e5aa68d..11c66a50ff56 100644
--- a/drivers/video/backlight/victron-gxdisp-bl.c
+++ b/drivers/video/backlight/victron-gxdisp-bl.c
@@ -12,6 +12,7 @@
 #include <linux/slab.h>
 #include <linux/i2c.h>
 #include <linux/backlight.h>
+#include <linux/regulator/consumer.h>
 
 /*
  * +------+------+----+----------------------------------+
@@ -64,6 +65,7 @@ struct gxbl {
 	struct backlight_device *bl;
 	const u8 *levels;
 	bool auto_brightness;
+	struct regulator *vcc_reg;
 };
 
 static int gxbl_read(struct gxbl *gxbl, u8 addr, void *buf, size_t len)
@@ -363,12 +365,26 @@ static int gxbl_probe(struct i2c_client *i2c)
 	if (!gxbl)
 		return -ENOMEM;
 
+	gxbl->vcc_reg = devm_regulator_get(&i2c->dev, "vcc");
+	if (IS_ERR(gxbl->vcc_reg)) {
+		dev_err(&i2c->dev, "can't get regulator: %pe\n", gxbl->vcc_reg);
+		return PTR_ERR(gxbl->vcc_reg);
+	}
+
+	err = regulator_enable(gxbl->vcc_reg);
+	if (err) {
+		dev_err(&i2c->dev, "can't enable regulator: %d\n", err);
+		return err;
+	}
+
 	snprintf(name, sizeof(name), "%s-%s", "gxdisp", dev_name(&i2c->dev));
 
 	bl = devm_backlight_device_register(&i2c->dev, name, &i2c->dev, gxbl,
 					    &gxbl_ops, NULL);
-	if (IS_ERR(bl))
-		return PTR_ERR(bl);
+	if (IS_ERR(bl)) {
+		err = PTR_ERR(bl);
+		goto err_out;
+	}
 
 	gxbl->i2c = i2c;
 	gxbl->bl = bl;
@@ -376,12 +392,16 @@ static int gxbl_probe(struct i2c_client *i2c)
 	i2c_set_clientdata(i2c, gxbl);
 
 	rev = gxbl_read8(gxbl, GXBL_SWREV);
-	if (rev < 0)
-		return rev;
+	if (rev < 0) {
+		err = rev;
+		goto err_out;
+	}
 
 	ctrl = gxbl_read8(gxbl, GXBL_CTRL);
-	if (ctrl < 0)
-		return ctrl;
+	if (ctrl < 0) {
+		err = ctrl;
+		goto err_out;
+	}
 
 	brightness = gxbl_read8(gxbl, GXBL_PWM_VAL);
 	gxbl->levels = gxbl_brightness_levels;
@@ -399,13 +419,18 @@ static int gxbl_probe(struct i2c_client *i2c)
 
 	err = sysfs_create_group(&bl->dev.kobj, &gxbl_attr_group);
 	if (err)
-		return err;
+		goto err_out;
 
 	gxbl_update(bl);
 
 	dev_info(&bl->dev, "GX Display backlight rev %d\n", rev);
 
 	return 0;
+
+err_out:
+	regulator_disable(gxbl->vcc_reg);
+
+	return err;
 }
 
 static int gxbl_remove(struct i2c_client *i2c)
@@ -413,6 +438,7 @@ static int gxbl_remove(struct i2c_client *i2c)
 	struct gxbl *gxbl = i2c_get_clientdata(i2c);
 
 	sysfs_remove_group(&gxbl->bl->dev.kobj, &gxbl_attr_group);
+	regulator_disable(gxbl->vcc_reg);
 
 	return 0;
 }
-- 
2.17.1

